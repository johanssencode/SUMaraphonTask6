//
//  ContentView.swift
//  SUMaraphonTask6
//
//  Created by A on 14.12.2024.
//
//

/*
 üèÅ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ¬´–°—Ç—Ä–æ–π–Ω—ã–π –†—è–¥¬ª. –°–¥–∞—Ç—å –¥–æ 16 –î–µ–∫–∞–±—Ä—è 21:00.
 
 –ù–∞ —ç–∫—Ä–∞–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç—ã. –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π -> –¥–∏–∞–≥–æ–Ω–∞–ª—å -> –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π.
 
 - –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ.
 - –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª-–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤.
 - –ö–≤–∞–¥—Ä–∞—Ç—ã ‚ö†Ô∏è –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ Safe Area, –Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ. –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –≤–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ, –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ.
 */

import SwiftUI

struct ContentView: View {
    
    @State var isDiagonal = false
    
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    let spacing: CGFloat = 8 // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
    let kvadratBGColor: Color = .blue // —Ñ–æ–Ω –∫–≤–∞–¥—Ä–∞—Ç–∞
    let kvadratCornerRadius: CGFloat = 6
    var kvadratCount: Int = 7 // –ª—é–±–æ–µ –∫–æ–ª-–≤–æ
    
    var body: some View {
        
        GeometryReader { geometry in
            
            // –®–∏—Ä–∏–Ω–∞ –∏ –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
            let screenWidth = geometry.size.width
            let screenHeight = geometry.size.height
            
            // –í—ã—Å–æ—Ç–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            let kvadratHeight = screenHeight / CGFloat(kvadratCount)
            
            // –†–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞, —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            let kvadratSize = isDiagonal
            ? kvadratHeight
            : (screenWidth - (spacing * CGFloat(kvadratCount - 1))) / CGFloat(kvadratCount)
            
            ForEach(0..<kvadratCount, id: \.self) { index in
                let i = CGFloat(index)
                
                Kvadrat(size: kvadratSize, bgColor: kvadratBGColor, cornerRadius: kvadratCornerRadius)
                    .position(
                        x: calculateXPosition(index: i, size: kvadratSize, screenWidth: screenWidth),
                        y: calculateYPosition(index: i, size: kvadratSize, screenHeight: screenHeight, kvadratHeight: kvadratHeight)
                    )
                
            }//: ForEach
            
        }//: GeometryReader
        .contentShape(Rectangle())
        .onTapGesture {
            
            withAnimation(.spring(duration: 0.4)) {
                isDiagonal.toggle()
           
            }
        }
    }
    
    // X –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∞
    func calculateXPosition(index: CGFloat, size: CGFloat, screenWidth: CGFloat) -> CGFloat {
        
        if isDiagonal {
         
            return index * (screenWidth - size) / CGFloat(kvadratCount - 1) + size/2
       
        } else {
          
            return index * (size + spacing) + size/2
            
        }
        
    }
    
    // Y –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∞
    func calculateYPosition(index: CGFloat, size: CGFloat, screenHeight: CGFloat, kvadratHeight: CGFloat) -> CGFloat {
        
        if isDiagonal {
            
            return screenHeight - (index * kvadratHeight + size/2)
            
        } else {
            
            return screenHeight/2
            
        }
        
    }
}

struct Kvadrat: View {
    
    let size: CGFloat
    let bgColor: Color
    let cornerRadius: CGFloat
    
    var body: some View {
        
        RoundedRectangle(cornerRadius: cornerRadius)
            .frame(width: size, height: size)
            .foregroundStyle(bgColor)
        
    }
    
}


#Preview {
    ContentView()
}
